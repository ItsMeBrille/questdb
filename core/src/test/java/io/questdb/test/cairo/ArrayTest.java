/*******************************************************************************
 *     ___                  _   ____  ____
 *    / _ \ _   _  ___  ___| |_|  _ \| __ )
 *   | | | | | | |/ _ \/ __| __| | | |  _ \
 *   | |_| | |_| |  __/\__ \ |_| |_| | |_) |
 *    \__\_\\__,_|\___||___/\__|____/|____/
 *
 *  Copyright (c) 2014-2019 Appsicle
 *  Copyright (c) 2019-2024 QuestDB
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 ******************************************************************************/

package io.questdb.test.cairo;

import io.questdb.cairo.ColumnType;
import io.questdb.cairo.arr.ArrayBuffers;
import io.questdb.cairo.arr.ArrayMeta;
import io.questdb.cairo.arr.ArrayTypeDriver;
import io.questdb.cairo.arr.ArrayViewImpl;
import io.questdb.cairo.sql.TableMetadata;
import io.questdb.cutlass.line.tcp.ArrayParser;
import io.questdb.std.str.DirectUtf8Sink;
import io.questdb.std.str.DirectUtf8String;
import io.questdb.test.AbstractCairoTest;
import org.junit.Assert;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ArrayTest extends AbstractCairoTest {

    @Test
    public void testArrayToJsonDouble() {
        ArrayViewImpl array = new ArrayViewImpl();
        try (ArrayBuffers bufs = new ArrayBuffers();
             DirectUtf8Sink sink = new DirectUtf8Sink(20)
        ) {
            bufs.shape.add(2);
            bufs.shape.add(2);
            bufs.type = ColumnType.encodeArrayType(ColumnType.DOUBLE, (int) bufs.shape.size());
            ArrayMeta.determineDefaultStrides(bufs.shape.asSlice(), bufs.strides);
            bufs.values.putDouble(1.0);
            bufs.values.putDouble(2.0);
            bufs.values.putDouble(3.0);
            bufs.values.putDouble(4.0);
            bufs.updateView(array);
            sink.clear();
            ArrayTypeDriver.arrayToJson(array, sink);
            assertEquals("[[1.0,2.0],[3.0,4.0]]", sink.toString());

            // transpose the array
            bufs.strides.reverse();
            bufs.updateView(array);
            sink.clear();
            ArrayTypeDriver.arrayToJson(array, sink);
            assertEquals("[[1.0,3.0],[2.0,4.0]]", sink.toString());
        }
    }

    @Test
    public void testArrayToJsonLong() {
        ArrayViewImpl array = new ArrayViewImpl();
        try (ArrayBuffers bufs = new ArrayBuffers();
             DirectUtf8Sink sink = new DirectUtf8Sink(20)
        ) {
            bufs.shape.add(2);
            bufs.shape.add(2);
            bufs.type = ColumnType.encodeArrayType(ColumnType.LONG, (int) bufs.shape.size());
            ArrayMeta.determineDefaultStrides(bufs.shape.asSlice(), bufs.strides);
            bufs.values.putLong(1);
            bufs.values.putLong(2);
            bufs.values.putLong(3);
            bufs.values.putLong(4);
            bufs.updateView(array);
            sink.clear();
            ArrayTypeDriver.arrayToJson(array, sink);
            assertEquals("[[1,2],[3,4]]", sink.toString());

            // transpose the array
            bufs.strides.reverse();
            bufs.updateView(array);
            sink.clear();
            ArrayTypeDriver.arrayToJson(array, sink);
            assertEquals("[[1,3],[2,4]]", sink.toString());
        }
    }

    @Test
    public void testArrayToJsonUsingParser() {
        DirectUtf8String str = new DirectUtf8String();
        try (ArrayParser parser = new ArrayParser();
             DirectUtf8Sink sink = new DirectUtf8Sink(20)
        ) {
            String arrayExpr = "[[1,2],[3,4]]";
            sink.clear();
            sink.put("[6i").put(arrayExpr.substring(1));
            parser.parse(str.of(sink.lo(), sink.hi()));
            sink.clear();
            ArrayTypeDriver.arrayToJson(parser.getView(), sink);
            assertEquals(arrayExpr, sink.toString());
        } catch (ArrayParser.ParseException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testCreateAsSelectDoubleNoWAL() throws Exception {
        assertMemoryLeak(() -> {
            execute(
                    "create table blah as (\n" +
                            "select rnd_varchar() a, rnd_double_array(1, 0) arr, rnd_int() b from long_sequence(10)\n" +
                            ");"
            );

            assertQuery(
                    "a\tarr\tb\n" +
                            "&\uDA1F\uDE98|\uD924\uDE04۲ӄǈ2L\t[0.4224356661645131,0.7094360487171202,0.38539947865244994,0.0035983672154330515,0.3288176907679504,0.021651819007252326]\t-938514914\n" +
                            "Y9}#jF\t[0.9687423276940171,0.6761934857077543,0.4882051101858693,0.42281342727402726,0.810161274171258,0.5298405941762054,0.022965637512889825,0.7763904674818695,0.975019885372507]\t-1533414895\n" +
                            "K䰭\u008B\t[0.456344569609078,0.2282233596526786,0.4149517697653501,0.04645849844580874,0.6821660861001273,0.45659895188239796,0.9566236549439661]\t-45567293\n" +
                            "#F0-k\\<*i^\t[0.49428905119584543,0.6359144993891355,0.5811247005631662,0.6752509547112409,0.9540069089049732,0.2553319339703062,0.8940917126581895,0.2879973939681931,0.6806873134626418,0.625966045857722,0.8733293804420821,0.7657837745299522]\t462277692\n" +
                            "\uDB59\uDF3B룒jᷚ\t[0.6697969295620055]\t-640305320\n" +
                            "?49Mqqpk-Z\t[0.8677181848634951,0.30716667810043663,0.4274704286353759,0.021189232728939578,0.7777024823107295,0.8221637568563206,0.22631523434159562,0.18336217509438513,0.9862476361578772]\t-2053564939\n" +
                            "V~!\t[0.5346019596733254]\t1728220848\n" +
                            "%l-\t[0.05024615679069011,0.9946372046359034,0.6940904779678791,0.5391626621794673,0.7668146556860689,0.2065823085842221,0.750281471677565,0.6590829275055244,0.5708643723875381,0.3568111021227658,0.05758228485190853,0.6729405590773638,0.1010501916946902]\t1448081412\n" +
                            "ꋵ\uD96E\uDCE7uKJܜߧ\t[0.1264215196329228,0.7215959171612961,0.4440250924606578,0.6810852005509421,0.24001459007748394,0.9292491654871197,0.741970173888595,0.25353478516307626,0.2739985338660311,0.39413730502371824,0.9359814814085834]\t-715453934\n" +
                            "ͱ:աf@ץ;윦\t[0.2559680920632348,0.23493793601747937,0.5150229280217947]\t1430716856\n",
                    "select * from blah",
                    true
            );
        });
    }

    @Test
    public void testCreateTableAllSupportedTypes() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table x (" +
                    "d double[][][]" +
                    ", b boolean[][][][]" +
                    ", bt byte[][][][][][][][]" +
                    ", f float[]" +
                    ", i int[][]" +
                    ", l long[][]" +
                    ", s short[][][][][]" +
                    ", dt date[][][][]" +
                    ", ts timestamp[][]" +
                    ", l2 long256[][][]" +
                    ", u uuid[][][][]" +
                    ", ip ipv4[][]" +
                    ", c double)");

            String[] expectedColumnNames = {
                    "d",
                    "b",
                    "bt",
                    "f",
                    "i",
                    "l",
                    "s",
                    "dt",
                    "ts",
                    "l2",
                    "u",
                    "ip",
                    "c"
            };

            String[] expectedColumnTypes = {
                    "DOUBLE[][][]",
                    "BOOLEAN[][][][]",
                    "BYTE[][][][][][][][]",
                    "FLOAT[]",
                    "INT[][]",
                    "LONG[][]",
                    "SHORT[][][][][]",
                    "DATE[][][][]",
                    "TIMESTAMP[][]",
                    "LONG256[][][]",
                    "UUID[][][][]",
                    "IPv4[][]",
                    "DOUBLE"
            };

            Assert.assertEquals(expectedColumnNames.length, expectedColumnTypes.length);
            // check the metadata
            try (TableMetadata m = engine.getTableMetadata(engine.verifyTableName("x"))) {
                Assert.assertEquals(expectedColumnNames.length, m.getColumnCount());

                for (int i = 0, n = expectedColumnNames.length; i < n; i++) {
                    Assert.assertEquals(expectedColumnNames[i], m.getColumnName(i));
                    Assert.assertEquals(expectedColumnTypes[i], ColumnType.nameOf(m.getColumnType(i)));
                }
            }
        });
    }

    @Test
    public void testInsertAsSelectDoubleNoWAL() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table blah (a double[][])");
            execute("insert into blah select rnd_double_array(2, 1) from long_sequence(10)");

            assertQuery(
                    "a\n" +
                            "[[null,0.08486964232560668,0.0843832076262595,0.6508594025855301]]\n" +
                            "[[null,0.22452340856088226,0.3491070363730514,null,0.4621835429127854,0.5599161804800813,0.7261136209823622,0.4224356661645131,0.7094360487171202,0.38539947865244994,0.0035983672154330515,0.3288176907679504,null,0.9771103146051203],[0.24808812376657652,0.6381607531178513,0.12503042190293423,0.9038068796506872,0.13450170570900255,0.8912587536603974,0.9755263540567968,null,0.810161274171258,0.5298405941762054,null,null,0.2459345277606021,0.05048190020054388],[0.16474369169931913,0.931192737286751,null,0.8001121139739173,0.18769708157331322,0.16381374773748514,0.6590341607692226,0.40455469747939254,null,0.5659429139861241,0.8828228366697741,null,0.45659895188239796,0.9566236549439661],[0.5406709846540508,0.8164182592467494,null,0.5449155021518948,0.1202416087573498,0.9640289041849747,0.7133910271555843,null,0.5891216483879789,null,null,0.48558682958070665,0.9047642416961028,null],[0.34947269997137365,0.19751370382305056,0.812339703450908,0.7176053468281931,null,0.8733293804420821,null,0.17833722747266334,null,null,0.026836863013701473,0.03993124821273464,null,null]]\n" +
                            "[[0.13006100084163252,null,null,0.8231249461985348,0.053594208204197136,null,null,0.7632615004324503,0.8816905018995145,null,0.5357010561860446,0.8595900073631431,0.6583311519893554,0.8259739777067459,0.8593131480724349],[0.33747075654972813,0.11785316212653119,0.7445998836567925,0.2825582712777682,0.2711532808184136,0.48524046868499715,null,0.029080850168636263,0.10459352312331183,null,0.20585069039325443,0.29659296554924697,null,0.9457212646911386,0.05024615679069011],[0.9946372046359034,0.6940904779678791,0.5391626621794673,null,0.4416432347777828,0.05158459929273784,0.2445295612285482,0.5466900921405317,0.5290006415737116,0.7260468106076399,0.7229359906306887,0.4592067757817594,null,null,0.35731092171284307],[0.9583687530177664,null,null,null,0.5691053034055052,0.12663676991275652,0.11371841836123953,0.062027497477155635,0.6901976778065181,0.7586254118589676,null,null,null,0.8144207168582307,0.14261321308606745],[null,0.4440250924606578,0.6810852005509421,null,0.4835256202036067,0.868788610834602,0.49154607371672154,0.4167781163798937,0.3454148777596554,null,null,null,0.9423671624137644,0.2093569947644236,0.5459599769700721],[0.7079450575401371,0.08712007604601191,null,null,null,0.18586435581637295,null,0.818064803221824,0.6213434403332111,0.2559680920632348,0.23493793601747937,0.5150229280217947,0.18158967304439033,0.8196554745841765,0.9130151105125102],[null,0.17405556853190263,null,null,0.7665029914376952,0.5796722100538578,0.07828020681514525,0.2394591643144588,0.9067923725015784,null,0.29168465906260244,null,0.20106623698844028,0.5626370294064983,0.7653255982993546],[0.8931810353578427,0.7704066243578834,0.5779007672652298,0.5692090442741059,0.7467013668130107,0.5794665369115236,0.13210005359166366,0.5762044047105472,0.988853350870454,0.7202789791127316,0.34257201464152764,0.3421816375714358,0.3041027402122686,0.11296257318851766,0.9546417330809595],[0.848083900630095,0.4698648140712085,0.8911615631017953,0.32093405888189597,0.8406396365644468,null,0.8217652538598936,0.6397125243912908,0.29419791719259025,null,0.8136014373529948,0.970570224065161,0.37286547899075506,null,null],[null,null,0.38509066982448115,0.5764439692141042,0.5475429391562822,0.6977332212252165,0.4610963091405301,0.5673376522667354,0.48782086416459025,null,0.13312214396754163,0.9435138098640453,null,0.17094358360735395,0.06670023271622016],[0.5449970817079417,null,0.8405815493567417,0.3058008320091107,null,0.034652347087289925,null,0.5900836401674938,0.12217702189166091,0.7717552767944976,0.8387598218385978,0.7620812803991436,0.21458226845142114,0.08934586837197267,0.6506604601705693],[null,null,0.5501133139397699,0.7134500775259477,null,0.734728770956117,0.33828954246335896,null,0.18967967822948184,0.48422587819911567,0.2970515836513553,0.959524136522573,null,0.7087011832273765,0.21047933106727745],[null,0.04404000858917945,0.14295673988709012,0.03314618075579956,0.8383060222517912,0.2325041018786207,null,0.10799057399629297,null,0.8353079103853974,0.011099265671968506,0.6671244607804027,0.11947100943679911,0.909668342880534,0.5238700311500556]]\n" +
                            "[[null,0.8504099903010793,null,null,null,null,0.15274858078119136,0.0016532800623808575,0.23567419576658333,0.5713685355920771,null,0.012228951216584294,0.9316283568969537],[0.3663509090570607,0.88982264111644,0.7073941544921103,0.4595378556321077,null,null,0.4412051102084278,null,0.43159834345466475,0.12454054765285283,0.7727320382377867,0.7707892345682454,0.8782062052833822],[0.4421551587238961,0.4388864091771264,0.32449127848036263,0.41886400558338654,null,0.31861843394057765,null,0.9370193388878216,0.39201296350741366,null,0.28813952005117305,0.65372393289891,null],[0.9375691350784857,0.5815065874358148,0.8615841627702753,null,null,0.020390884194626757,0.38881940598288367,0.4444125234732249,0.42044603754797416,null,0.5261234649527643,0.030750139424332357,0.20921704056371593],[0.681606585145203,0.11134244333117826,null,0.5863937813368164,0.2103287968720018,0.3242526975448907,0.42558021324800144,null,0.6068565916347403,0.7617663592833062,0.6315327885922489,null,0.6995547582800753],[null,0.4950615235019964,0.04558283749364911,0.3595576962747611,null,null,0.0966240354078981,null,0.21224614178286005,0.9694731343686098,0.24584615213823513,null,0.5965069739835686],[0.9239514793425267,0.6690790546123128,0.6591146619441391,0.8545896910200949,0.2712934077694782,0.45516613187238597,0.3228786903275197,null,null,0.08039440728458325,0.7600550885615773,0.05890936334115593,0.023600615130049185],[0.13525597398079747,0.10663485323987387,0.05995797344646303,0.7600677648426976,null,0.6198590038961462,0.7020508159399581,null,0.6404197786416339,0.828928908465152,null,null,0.38000152873098747],[0.5157225592346661,null,0.16320835762949149,0.6952925744703682,null,null,null,0.19063674639636496,0.535993442770838,0.5725722946886976,0.8760952835787964,0.32282028174282695,0.9224004398482664],[0.6172681090021809,0.5320636725174561,0.13226561658653546,0.3209515177515627,0.8896010238998574,0.38656452532530694,0.8911136895705645,null,0.061646717786158045,0.6367746812001958,null,0.6936669914583254,0.7128505998532723],[0.5940502728139653,0.7861254708288083,0.1319044042993568,0.45862629276476996,0.3812506482325819,0.307622006691777,null,null,0.7587860024773928,0.48422909268940273,0.9176263114713273,0.3981872443575455,0.6504194217741501],[0.23387203820756874,null,0.30874126787936973,0.6931441108030082,0.16048069056478798,null,0.736755875734414,0.12465120312903266,0.04734223739255916,0.10424082472921137,null,0.9266929571641075,0.19823647700531244]]\n" +
                            "[[0.7417434132166958,0.8306929906890365,0.5763691784056397,0.7022152611814457,0.3257868894353412,0.19814885694903128,null,0.6355534187114189,0.19073234832401043,0.14105044938124922,0.236380596505666],[0.009379969318743853,0.7564214859398338,0.06970926959068269,0.45388767393986074,0.8645117110218422,0.7298540433653912,0.588707402066503,null,0.9891642698247116,null,null],[null,0.9321403914883201,null,null,0.43990342764801993,0.6130518815428464,0.9755586311085417,0.5522442336842381,0.9385037871004874,0.16227550791363532,null],[null,0.9154548873622441,0.8470755372946043,0.8061988461374605,0.6343133564417237,0.9380189854875546,null,0.11763567185322699,0.41965514885911137,0.3057937704964272,0.635559043242417],[0.38106875419134767,0.3838483044911978,null,0.6224023788514188,0.23956847762469535,null,null,0.8151906661765794,null,0.3197593740177185,null],[0.28400807705010733,0.5784462314078672,null,0.5191884769160172,null,0.591069738864946,0.6051467286553064,0.13660430775944932,0.8941438652004624,null,0.6391251028594114],[null,null,0.1790475858715116,0.7504512900310369,0.9583685768295167,null,null,0.12934061164115174,0.018689012580364706,0.8940422626709261,null],[0.7536836395346167,0.04727174057972261,0.819524120126593,0.28598292472656794,0.42934437054513563,0.7066431848881077,null,null,0.9940353811420282,null,0.5455175324785665],[0.8248550185892197,null,0.8669667625804924,0.6609657087067649,0.486440482380041,0.03554537640844224,0.9128848579835603,0.8510208445183796,null,0.865090011761414,null],[null,0.3669999679163578,0.7116036820921031,0.7184108604451028,0.7995154334778554,0.7776474810620265,0.028814588598028656,0.4151433463570058,null,0.32317345869453706,0.9632550816669818],[null,null,null,0.7958221844381383,null,null,0.49950663682485574,0.9700250276928207,0.9251043257912728,0.4899025858706836,null],[0.8052728021480802,0.04229155272030727,null,0.11500943478849246,0.5945632194415877,0.288531163175191,0.0369352861985911,0.22243351688740076,0.3826966600855539,0.4287405981191371,null],[0.22148534962398414,0.705318413494936,0.45039214871547917,0.4127332979349321,null,null,0.9520909221021127,0.4718682265067845,0.3622980885814183,0.20229159120610396,null],[0.8503583964852268,null,0.9236914780318218,0.9759588687260482,0.7277312337314652,null,0.10999942140960017,null,0.8267002457663516,null,0.1061278014852981]]\n" +
                            "[[0.625275838160094,0.5330895288680357,0.14419737823460133,null,null,0.838362961151687,0.8918855657253252,0.7609079180054751,null,0.2869636576132818,0.9028381160965113,0.12049392901868938],[0.7399948696680694,null,0.2748234652841348,0.8590362244860776,null,null,0.7852927728037424,null,0.38014703172702147,0.9965895851849988,null,0.2007867568752738],[0.41716226532623835,0.48632841774699487,0.2717670505640706,null,0.8964900546165293,0.5460896792544052,0.2763714033301786,0.5507381683150634,0.20149911409322863,0.6160933784748995,0.11465885305674761,null],[null,0.7150816943347986,0.2977278793266547,0.4953196080826836,0.43941704009365956,0.8651187221525168,0.05059835909941457,0.5900812634557904,null,0.5114140976913433,0.04929733954707505,null],[0.9371394524682951,0.3124396473722044,null,0.30847764561455926,0.6196561753422045,0.014310575205308873,0.9747094598716854,0.9437779358146624,0.696965544418365,null,0.3082260347287745,0.110401374979613],[0.4203897782712428,0.9879118064160076,0.018947880493912606,0.5443009706474673,0.007993869695747557,0.2840382852834289,0.46648649884157944,0.03804995327454719,0.10288432263881209,0.9336208924208746,0.48264093321778834,0.7311141146439794],[0.09509439640459871,0.6455308455173533,0.5938364474282036,0.14008139132534625,0.7798032758089017,0.08746940413841608,0.47367603337536135,0.4131950003969651,0.779572495695852,0.8368079742276645,0.7608768377234525,0.07419488600417712],[0.5115629621647786,null,0.7984983087387133,0.4472458525819868,null,0.6162890904954973,0.8223388398922372,null,0.5413676914584489,null,null,0.7487334280076515],[0.5319122221997539,null,0.511401697239172,0.8372868888898526,null,0.6830295031437096,0.10228921976579197,null,0.538852735365158,0.2749299986087188,null,0.7696096102283352],[0.6440120149579229,0.08367741357193248,null,null,null,null,0.7559205543286167,0.8997593158412944,null,0.5501791172519537,0.3200388527033077,0.017077050555570406]]\n" +
                            "[[0.48770772310128674,0.9136698830540818,0.41959365629159706,0.8133335967380011,0.1444792715432155,0.3924436202424225,0.5617105272690266],[null,0.3879703324918904,null,0.14319965942499036,0.8762527725957238,0.3337986395099132,0.8401902592277716],[null,0.9122720448426606,null,0.5772963808264585,0.36639618205313174,0.5698455447947597,0.1760335737117784],[0.1548262580996853,0.9694379845594773,0.2232959099494619,null,0.33548246037044094,null,0.010035423466609461],[0.8823770493226967,null,0.03223511148936853,0.6438822329528859,null,null,0.4975807351172973],[0.47358196507052297,null,0.24633823409315458,0.27293702465966674,0.13655419467547736,0.4214933542294964,0.8810300364147652],[null,0.6311675966318214,null,0.05599002717005319,null,null,0.23150412372729956],[0.4436404792987545,0.8729343423795236,null,null,0.2269754527380209,null,0.01722340737899619],[0.6415273995286206,null,0.3808955145939156,null,null,0.2682009935575007,0.813401076817784],[null,0.2589485743642158,null,0.7954501942090235,0.37153646386438366,0.532264810312935,null],[0.7833683701144168,null,0.25902209911086704,0.7342742722525102,0.4922628637697192,0.3594104873465158,0.9444385890780336],[0.5943386578834184,0.2167236081321272,0.3390559525012298,0.396044125361976,0.8296483107974604,null,0.7996807760628202],[null,null,0.59632703273838,0.6699852112073831,0.49527776273310486,null,null],[0.7910708989656754,0.28070451973825394,0.14702614961805072,0.5541268763095203,0.9009775009089753,0.3872049813004539,null],[null,0.2992989877169011,0.6714436866004777,0.1722548698939924,0.3744661371925302,0.12639554210368897,null]]\n" +
                            "[[0.07249353704307582,0.4972049796950656,0.7396895179853595,0.8374665772063014,0.2648780427570352,0.18209826013076702,0.6518094128005566,0.6361803612485613,0.25360631912488385,0.30583440932161066,0.5149106041333245,0.7060432532682597],[0.7729051818907344,0.6592659982804954,0.7048071355343314,null,0.29017208836545494,0.168062238430135,0.8607654214669396,0.012605799324587275,0.07568350085706077,0.9977968169274879,0.16564329235390252,0.7640223966893878],[null,null,null,0.7606096978638481,0.10799228316906728,0.13850419027225458,0.7951495263708774,0.28064354665692726,0.2885975915542155,0.7846457087898672,0.9491441900738318,0.46676769695170806],[0.5970190396613553,null,0.0628161240652424,0.2236430281797107,0.11602638079470873,null,0.6397116958115132,0.5903292901959799,0.8081702003994685,0.7133569384715547,0.9031596755527048,0.7577710411992817],[0.5400832803729302,0.28780967407815317,0.11120134948624694,null,0.24333255137148546,0.2661481258012208,0.1059984516511765,0.5636564813553648,0.5074877749062782,0.9376548591973837,0.09648061880838898,null],[0.0696798350737855,null,0.9637409122545475,0.06818764947743572,null,0.9790606155233822,null,0.42130182460317767,0.7367576827380982,0.6526377090829717,null,0.606127097981867],[null,0.4827490189042424,0.4197074512618787,null,0.09114874576214838,null,0.30128361834175243,0.3761882472844964,0.37565373531697777,0.5060655873751713,0.8164249433136563,0.01280088667917001],[0.5886171491892752,null,0.06115382042103079,0.03785842679744411,0.2676094355849844,0.28069912068346936,0.21231239376765998,0.06104111935464773,0.19601431728224172,0.028465583868469424,0.023780164968562834,0.2925095264769467],[0.817623781720735,0.5650671906547997,0.5872776844863592,0.15761877750359965,null,null,0.4432362491352081,null,0.14982199475775193,0.5542476776901315,0.4452645911659644,0.5669906287267767],[0.8638077670566735,0.3749470137249791,null,0.9832126367884851,0.39907906168345886,0.9233347790472138,0.2052621553268983,null,0.6547419627255642,null,null,null],[null,0.7166146534916156,null,0.023101905486177965,0.43745219952112857,0.7267721806665918,0.4532473302572152,0.331542636971926,0.7613115945849444,null,null,null],[0.05585507463682027,null,0.7712015783372335,0.5878460996916319,null,0.48347771832992303,0.8323999830230796,0.3649652944981656,0.43488889358036487,null,0.03407100805686525,0.7869585286400578]]\n" +
                            "[[0.8779552626878336,null,0.7826633768878841,0.259695482245886,null,null,0.020588951610466033,0.9749391591297927,0.22183926354846573],[0.24586870756326218,0.7854514560860658,0.4340593345759689,0.6588605039756569,null,0.4290706866408647,0.1413990284888046,0.4594571708151399,0.35386502620368654],[0.09304799319145796,0.21779759322829817,0.9566312959259167,0.09397252705327175,0.9127563414908738,0.3265273318465457,0.8720490934003815,0.9726461245923591,0.8304454766991382],[0.7279607221195401,0.35877905968450163,0.9558141868590608,0.41649456747925984,0.2524610975519621,0.43809568005354127,null,0.4782200683933733,0.39982154139676684],[null,0.12935767471721227,0.7796157645205235,0.6264666980755385,null,0.8122545628814051,null,0.5443717183730061,null],[0.4307559690559112,0.01970074949543621,0.9135345589823056,0.28292897749886314,0.5766772022370283,0.6243142515884448,null,0.9753902444933247,0.3853367020372517],[null,0.05275449188032055,0.21170959516204924,null,null,null,0.330918030605716,0.6701859066319285,0.6526405396145122]]\n" +
                            "[[0.22511384700837267,0.32649046396073444,0.6721827910578719,0.15586430484908198,0.7700868007538937,0.1861199801036444,0.9721757346464024,0.10012992950584709,0.29730771383540433,0.8811529559203428,null,null,null,null,0.996743576596805],[0.22269565900196953,0.15363439252599098,null,0.9623171728038233,0.5152077533355048,0.5550271329773221,null,0.15243698264214978,0.36092516320665147,0.6365912614668545,null,null,0.5470221658822219,0.8621424299564775,0.2871069368816722],[null,0.2698247661309793,0.4531424919285716,0.6085797228669808,0.4524050162454656,0.12003762630199555,null,0.19166383036708756,0.8557621810781164,0.30053814664774847,0.37210636725248813,0.5245016413430169,0.20589046550328416,0.7597620978672699,0.14540649893373514],[0.6874650689552196,0.04494735916641668,null,0.9844482085939221,null,0.16525810396139984,0.5173940547749024,null,0.07575818123350675,0.8376397641027775,0.5665064140662698,null,0.2841908337143171,0.06444270083307668,0.45599788972627586],[0.6933801625117869,0.9817658526194231,0.7843283722983255,0.06269658001562883,0.04932501104049258,0.24949759549005113,null,null,0.3833940229112621,0.9936834310197583,0.8386044991800844,0.5336222997260517,0.22009352219063893,0.12326574995940665,0.8200421026079597],[0.06472617587436369,0.7184609497917785,0.9374156956020483,0.9790870946569337,0.4353972285974451,0.4238934314950764,0.6794708024117474,null,0.7686191346926147,null,0.06585925388777292,0.6670228450708864,0.4653998788482615,0.41265788151170835,0.1914161844876806],[0.5469257570499296,0.20869523440218085,0.47046214502342254,0.5277233818830627,0.2263345107996424,0.8375723114173276,0.2973413048547613,0.02206807161850266,0.7708094983496303,0.7774992993301526,null,null,0.35821283214301636,null,0.17485263263815565],[0.19882280937094632,0.8451212749109064,0.362912927226985,0.35083644032896444,null,0.30921242717108066,null,0.6092038333046033,0.2693555855483414,0.10877923764275288,0.6572120613260216,0.33809011868832284,0.5196604467083402,0.9288565084324227,0.6588214619993266],[0.355786772193197,0.09686702972055339,0.3793365372760392,0.24601377357831455,null,0.3883845787817346,null,null,0.6354790267464765,0.526469565507781,0.6680272694938101,0.7878289993451696,0.1659891622620966,0.7582812474656514,null],[null,null,null,0.13260889791591712,0.5418085488978492,0.36658512235236584,0.9557940492957487,0.1570704400490346,0.034904847183765186,0.5749982450146361,0.13360028796545642,null,0.6703069631122424,null,0.04795496832215018],[0.5763505353526829,null,0.41876634576982885,0.7437656766929067,0.32010882429399834,0.4288965848487438,null,0.7676022109649517,null,0.08320499697553518,0.15721123459015562,null,null,0.6027658421256401,0.6172363599139938],[0.11185706151036878,0.5994873891740121,0.25917153541462035,0.3628458314023303,null,null,0.29309813796291284,0.5832447623746595,null,0.48781272232790374,null,0.7440015159909962,0.7229234101093484,0.6662560653844911,0.6697603442453015],[null,0.5009939966556752,null,null,0.36839889389171143,0.6701077660798066,null,0.19676893721907063,0.4799415921194079,0.14966787594435282,0.4163426844350143,0.1816642064152728,0.22092534266452646,0.5805847504087114,0.05811467726635178]]\n",
                    "select * from blah",
                    true
            );
        });
    }

    @Test
    public void testTypeCast() {
        for (int i = 1; i < ColumnType.ARRAY_DIMENSION_LIMIT; i++) {
            for (short j = ColumnType.BOOLEAN; j <= ColumnType.IPv4; j++) {
                if (!ColumnType.isSupportedArrayElementType(j)) {
                    continue;
                }
                Assert.assertTrue(ColumnType.isAssignableFrom(
                        ColumnType.encodeArrayType(j, i),
                        ColumnType.encodeArrayType(j, i)
                ));
                Assert.assertTrue(ColumnType.isAssignableFrom(
                        ColumnType.NULL,
                        ColumnType.encodeArrayType(j, i)
                ));
            }
        }

        for (int i = 1; i < ColumnType.ARRAY_DIMENSION_LIMIT; i++) {
            for (short j = ColumnType.BOOLEAN; j <= ColumnType.IPv4; j++) {
                if (!ColumnType.isSupportedArrayElementType(j)) {
                    continue;
                }
                // not assignable from scalar to any array
                Assert.assertFalse(ColumnType.isAssignableFrom(j, ColumnType.encodeArrayType(j, i)));
                // ... nor the other way around
                Assert.assertFalse(ColumnType.isAssignableFrom(ColumnType.encodeArrayType(j, i), j));
            }
        }
    }

    @Test
    public void testUnsupportedArrayDimension() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table x (a int[][][][][][][][][][][][][][][][])");
            try (TableMetadata m = engine.getTableMetadata(engine.verifyTableName("x"))) {
                Assert.assertEquals(1, m.getColumnCount());
                Assert.assertEquals("a", m.getColumnName(0));
                Assert.assertEquals("INT[][][][][][][][][][][][][][][][]", ColumnType.nameOf(m.getColumnType(0)));
            }
            assertExceptionNoLeakCheck(
                    "create table y (a int[][][][][][][][][][][][][][][][][])", // 17 dimensions
                    18,
                    "array dimension limit is 16"
            );
        });
    }

    @Test
    public void testUnsupportedArrayType() throws Exception {
        assertMemoryLeak(() -> {
            assertExceptionNoLeakCheck(
                    "create table x (a symbol[][][])",
                    18,
                    "SYMBOL array type is not supported"
            );
            assertExceptionNoLeakCheck(
                    "create table x (abc varchar[][][])",
                    20,
                    "VARCHAR array type is not supported"
            );
        });
    }

}
