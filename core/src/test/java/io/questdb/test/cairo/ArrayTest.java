/*******************************************************************************
 *     ___                  _   ____  ____
 *    / _ \ _   _  ___  ___| |_|  _ \| __ )
 *   | | | | | | |/ _ \/ __| __| | | |  _ \
 *   | |_| | |_| |  __/\__ \ |_| |_| | |_) |
 *    \__\_\\__,_|\___||___/\__|____/|____/
 *
 *  Copyright (c) 2014-2019 Appsicle
 *  Copyright (c) 2019-2024 QuestDB
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 ******************************************************************************/

package io.questdb.test.cairo;

import io.questdb.cairo.ColumnType;
import io.questdb.cairo.sql.TableMetadata;
import io.questdb.test.AbstractCairoTest;
import org.junit.Assert;
import org.junit.Test;

public class ArrayTest extends AbstractCairoTest {

    @Test
    public void testCreateAsSelectDoubleNoWAL() throws Exception {
        assertMemoryLeak(() -> {
            execute(
                    "create table blah as (\n" +
                            "select rnd_varchar() a, rnd_double_array(1) arr, rnd_int() b from long_sequence(10)\n" +
                            ");"
            );

            assertQuery(
                    "a\tarr\tb\n" +
                            "&\uDA1F\uDE98|\uD924\uDE04۲ӄǈ2L\t[0.6276954028373309,0.6693837147631712,0.7094360487171202,0.8756771741121929,0.1985581797355932,0.0035983672154330515]\t-212807500\n" +
                            "/\uD8E7\uDF98и\uDA89\uDFA4~2\uDAC6\uDED3ڎB\t[0.16474369169931913,0.4900510449885239,0.7643643144642823,0.9075843364017028,0.04142812470232493,0.18769708157331322]\t-235358133\n" +
                            "5ʜ\uDB8D\uDE4Eᯤ\\\t[0.1202416087573498,0.03831785863680992,0.6230184956534065,0.7133910271555843,0.6359144993891355,0.5891216483879789,0.4971342426836798,0.6752509547112409,0.5065228336156442]\t-1593630138\n" +
                            "FwH93rhi\t[0.7176053468281931,0.24008362859107102,0.8733293804420821,0.9455893004802433,0.17833722747266334,0.6247427794126656,0.3045253310626277,0.3901731258748704,0.03993124821273464,0.10643046345788132,0.8438459563914771]\t-636975106\n" +
                            "\"+z\t[0.6697969295620055]\t-640305320\n" +
                            "?49Mqqpk-Z\t[0.8998921791869131,0.6583311519893554,0.30716667810043663,0.33746104579374825,0.8593131480724349,0.021189232728939578,0.10527282622013212,0.11785316212653119,0.8221637568563206]\t862447505\n" +
                            "mLG\t[0.48524046868499715,0.8693768930398866,0.029080850168636263,0.7381752894013154,0.5185631921367574,0.5346019596733254]\t1728220848\n" +
                            "%l-\t[0.2672120489216767,0.5025890936351257,0.9946372046359034,0.38422543844715473,0.48964139862697853,0.5391626621794673,0.17180291960857297,0.4416432347777828,0.2065823085842221,0.8584308438045006,0.2445295612285482,0.6590829275055244,0.043606408996349044]\t-1775036711\n" +
                            "珣zx6쪎>\uDAE6\uDEE3\t[0.33903600367944675]\t-358259591\n" +
                            "\"G~;.3\t[0.8144207168582307,0.5677191487344088,0.7215959171612961,0.2836347139481469,0.5425297056895126,0.6810852005509421,0.20727557301543031,0.4835256202036067,0.9292491654871197,0.7292482367451514,0.49154607371672154]\t-1479209616\n",
                    "select * from blah",
                    true
            );
        });
    }

    @Test
    public void testCreateTableAllSupportedTypes() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table x (" +
                    "d double[][][]" +
                    ", b boolean[][][][]" +
                    ", bt byte[][][][][][][][]" +
                    ", f float[]" +
                    ", i int[][]" +
                    ", l long[][]" +
                    ", s short[][][][][]" +
                    ", dt date[][][][]" +
                    ", ts timestamp[][]" +
                    ", l2 long256[][][]" +
                    ", u uuid[][][][]" +
                    ", ip ipv4[][]" +
                    ", c double)");

            String[] expectedColumnNames = {
                    "d",
                    "b",
                    "bt",
                    "f",
                    "i",
                    "l",
                    "s",
                    "dt",
                    "ts",
                    "l2",
                    "u",
                    "ip",
                    "c"
            };

            String[] expectedColumnTypes = {
                    "DOUBLE[][][]",
                    "BOOLEAN[][][][]",
                    "BYTE[][][][][][][][]",
                    "FLOAT[]",
                    "INT[][]",
                    "LONG[][]",
                    "SHORT[][][][][]",
                    "DATE[][][][]",
                    "TIMESTAMP[][]",
                    "LONG256[][][]",
                    "UUID[][][][]",
                    "IPv4[][]",
                    "DOUBLE"
            };

            Assert.assertEquals(expectedColumnNames.length, expectedColumnTypes.length);
            // check the metadata
            try (TableMetadata m = engine.getTableMetadata(engine.verifyTableName("x"))) {
                Assert.assertEquals(expectedColumnNames.length, m.getColumnCount());

                for (int i = 0, n = expectedColumnNames.length; i < n; i++) {
                    Assert.assertEquals(expectedColumnNames[i], m.getColumnName(i));
                    Assert.assertEquals(expectedColumnTypes[i], ColumnType.nameOf(m.getColumnType(i)));
                }
            }
        });
    }

    @Test
    public void testInsertAsSelectDoubleNoWAL() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table blah (a double[][])");
            execute("insert into blah select rnd_double_array(2) from long_sequence(10)");

            assertQuery(
                    "a\n" +
                            "[[0.2246301342497259,0.08486964232560668,0.299199045961845,0.20447441837877756]]\n" +
                            "[[0.8423410920883345,0.9856290845874263,0.22452340856088226],[0.5093827001617407,0.6254021542412018,0.7611029514995744]]\n" +
                            "[[0.5599161804800813,0.0367581207471136,0.2390529010846525,0.4224356661645131,0.6778564558839208,0.3100545983862456,0.38539947865244994,0.8799634725391621,0.33608255572515877,0.3288176907679504,0.7675673070796104],[0.9771103146051203,0.6217326707853098,0.15786635599554755,0.6381607531178513,0.4022810626779558,0.5793466326862211,0.9038068796506872,0.12026122412833129,0.6761934857077543,0.8912587536603974,0.3435685332942956],[0.42281342727402726,0.26922103479744897,0.7664256753596138,0.5298405941762054,0.5522494170511608,0.8445258177211064,0.7763904674818695,0.05048190020054388,0.8847591603509142,0.0011075361080621349,0.931192737286751],[0.8258367614088108,0.8001121139739173,0.38642336707855873,0.92050039469858,0.16381374773748514,0.456344569609078,0.8664158914718532,0.40455469747939254,0.4149517697653501,0.5659429139861241,0.05384400312338511],[0.6821660861001273,0.7230015763133606,0.9644183832564398,0.9566236549439661,0.11585982949541473,0.5778947915182423,0.8164182592467494,0.8685154305419587,0.5449155021518948,0.437176959518218,0.769238189433781],[0.9640289041849747,0.49428905119584543,0.42020442539326086,0.6551335839796312,0.5811247005631662,0.2820020716674768,0.48558682958070665,0.9540069089049732,0.44804689668613573,0.03167026265669903,0.8940917126581895],[0.19751370382305056,0.9441658975532605,0.6806873134626418,0.7176053468281931,0.24008362859107102,0.8733293804420821,0.9455893004802433,0.17833722747266334,0.6247427794126656,0.3045253310626277,0.3901731258748704],[0.03993124821273464,0.10643046345788132,0.8438459563914771,0.07246172621937097,0.0171850098561398,0.3679848625908545,0.8231249461985348,0.6697969295620055,0.4295631643526773,0.26369335635512836,0.7632615004324503],[0.5699444693578853,0.9820662735672192,0.19846258365662472,0.32424562653969957,0.8595900073631431,0.8677181848634951,0.7458169804091256,0.8259739777067459,0.4274704286353759,0.18740488620384377,0.33747075654972813],[0.7777024823107295,0.8291193369353376,0.7445998836567925,0.22631523434159562,0.5992548493051852,0.2711532808184136,0.9862476361578772,0.6202777455654276,0.6797562990945702,0.8189713915910615,0.10459352312331183],[0.7365115215570027,0.20585069039325443,0.9418719455092096,0.9884011094887449,0.24642266252221556,0.7340656260730631,0.05024615679069011,0.13264292470570205,0.8952510116133903,0.6940904779678791,0.029227696942726644],[0.7700798090070919,0.7668146556860689,0.7792222977665411,0.05158459929273784,0.750281471677565,0.06846631555382798,0.5466900921405317,0.5708643723875381,0.11128296489732104,0.7260468106076399,0.05758228485190853],[0.07594017197103131,0.4592067757817594,0.1010501916946902,0.7606252634124595,0.05094182589333662,0.9583687530177664,0.38402128906440336,0.8977236684869918,0.5691053034055052,0.6069927532469744,0.7694744648762927]]\n" +
                            "[[0.33903600367944675],[0.892454783921197],[0.6901976778065181],[0.706473302224657],[0.5913874468544745],[0.7704949839249925],[0.04173263630897883],[0.1264215196329228],[0.14261321308606745],[0.2677326840703891],[0.4440250924606578],[0.23507754029460548],[0.09618589590900506],[0.24001459007748394],[0.08675950660182763]]\n" +
                            "[[0.741970173888595,0.6107894368996438]]\n" +
                            "[[0.2739985338660311,0.05514933756198426,0.8001632261203552,0.9359814814085834]]\n" +
                            "[[0.2093569947644236,0.7873229912811514,0.8439276969435359,0.7079450575401371,0.03973283003449557],[0.33504146853216143,0.8551850405049611,0.8321000514308267,0.7769285766561033,0.5637742551872849],[0.6226001464598434,0.6213434403332111,0.7195457109208119,0.8786111112537701,0.23493793601747937],[0.6001225339624721,0.6334964081687151,0.18158967304439033,0.95820305972778,0.7707249647497968],[0.9130151105125102,0.28964821678040487,0.17405556853190263,0.4729022357373792,0.6887925530449002],[0.007985454958725269,0.5796722100538578,0.9691503953677446,0.7530494527849502,0.2394591643144588],[0.8775452659546193,0.0024457698760806945,0.19736767249829557,0.11591855759299885,0.3121271759430503],[0.7530490055752911,0.5626370294064983,0.3521084750492214,0.49199001716312474,0.8931810353578427],[0.18746631995449403,0.37873228328689634,0.5779007672652298,0.7272119755925095,0.33976095270593043],[0.7467013668130107,0.8402964708129546,0.018146422106370075,0.13210005359166366,0.587752738240427],[0.03192108074989719,0.988853350870454,0.17498425722537903,0.05133515566281188,0.34257201464152764],[0.7795623293844108,0.9790787740413469,0.3041027402122686,0.7527907209539796,0.961198285124337],[0.9546417330809595,0.4834201611292943,0.1479745625593103,0.4698648140712085,0.8115426881784433],[0.1402258042231984,0.32093405888189597,0.7431472218131966,0.04321289940104611,0.34224858614452547],[0.6612090806765161,0.6397125243912908,0.0031075670450616544,0.01396079545983997,0.865629565918467]]\n" +
                            "[[0.970570224065161,0.8280460741052847,0.7198854503668188,0.11624252077059061,0.31617860377666984,0.38509066982448115,0.21498295033639603,0.933609514582851,0.5475429391562822,0.17202485647400034,0.8514849800664227,0.4610963091405301,0.4268921400209912,0.34804764389663523,0.48782086416459025],[0.5234892454427748,0.13312214396754163,0.9855834535287886,0.9482880758785679,0.5025413806877073,0.7039785408034679,0.06670023271622016,0.5083087912946505,0.036735155240002815,0.8136066472617021,0.8766908646423737,0.3058008320091107,0.9753445881385404,0.034652347087289925,0.5598187089718925],[0.5900836401674938,0.9683642405595932,0.1460524999338917,0.7717552767944976,0.04211401699125483,0.8124306844969832,0.7620812803991436,0.4627885105398635,0.2703179181043681,0.08934586837197267,0.2000682450929353,0.3317641556575974,0.7020445151566204,0.5501133139397699,0.1389067130304884],[0.22347827811588927,0.1599211504269954,0.16698121316984016,0.33828954246335896,0.8531407145325477,0.18967967822948184,0.009302399817494589,0.6053450223895661,0.2970515836513553,0.06027878760582406,0.7826107801293182,0.5160053477987824,0.3218450864634881,0.21047933106727745,0.8796413468565342],[0.04404000858917945,0.40425101135606667,0.41496612044075665,0.03314618075579956,0.36078878996232167,0.8376764297590714,0.2325041018786207,0.7397816490927717,0.10799057399629297,0.8386104714017393,0.8353079103853974,0.9001273812517414,0.11048000399634927,0.6671244607804027,0.6001215594928115],[0.7242368741635276,0.909668342880534,0.09977691656157406,0.6741248448728824,0.2862717364877081,0.0652033813358841,0.3833564540051365,0.8853675629694284,0.5788151025779464,0.15274858078119136,0.7887510806568455,0.7468602267994937,0.23567419576658333,0.9976896430755934,0.3489278573518253],[0.7645280362997794,0.024056391028085766,0.9316283568969537,0.8791439438812569,0.33218666480522674,0.88982264111644,0.6940917925148332,0.10820602386069589,0.4595378556321077,0.30062011052460846,0.5380626833618448,0.7370823954391381,0.7783351753890267,0.533524384058538,0.12454054765285283]]\n" +
                            "[[0.2625424312419562,0.7707892345682454],[0.1350821238488883,0.7943185767500432],[0.4421551587238961,0.8376372223926546],[0.34491612561683394,0.32449127848036263]]\n" +
                            "[[0.5851907409526976,0.8409080254825717,0.15121120303896474,0.4031733414086601,0.37879273531433755,0.39201296350741366,0.11025007918539531,0.28813952005117305,0.16064467510169633],[0.5064580751162086,0.09819796588374863,0.5765797240495835,0.5815065874358148,0.7055404165623212,0.4039042639581232,0.40410163160526613,0.020390884194626757,0.8802810667279274],[0.6366661294462517,0.4444125234732249,0.27755720049807464,0.9531459048178456,0.47603861281459736,0.0567238328086237,0.030750139424332357,0.22252546562577824,0.9216728993460965],[0.681606585145203,0.21827559339020297,0.8869397617459538,0.08109202364673884,0.5221781467839528,0.2103287968720018,0.2266157317795261,0.18117321644738615,0.42558021324800144],[0.6993909595959196,0.6068565916347403,0.9534844124580377,0.004918542726028763,0.6315327885922489,0.008134052047644613,0.6995547582800753,0.6361737673041902,0.4950615235019964],[0.28831783004973577,0.442095410281938,0.3595576962747611,0.2195743166842714,0.7999403044078355,0.25131981920574875,0.5823910118974169,0.4634306737694158,0.9694731343686098],[0.9849599785483799,0.9887681426881507,0.5614062040523734,0.39211484750712344,0.9239514793425267,0.29120049877582566,0.28122627418701307,0.6591146619441391,0.16011053107067486],[0.3504695674352035,0.2712934077694782,0.28019218825051395,0.041230021906704994,0.3228786903275197,0.6852762111021103,0.06052105248562101,0.3448217091983955,0.7600550885615773],[0.6884149023727977,0.45278823120909895,0.023600615130049185,0.026319297183393875,0.7630648900646654,0.10663485323987387,0.6246882387989457,0.48573429889865705,0.7600677648426976],[0.8973562700864572,0.6198590038961462,0.06820168647245783,0.7280036952357564,0.5862806534829702,0.8277715252854949,0.828928908465152,0.09213339395256293,0.647875746786617],[0.9113999356978634,0.5157225592346661,0.5929911960174489,0.16320835762949149,0.09854153834719315,0.8203418140538824,0.5056919786516945,0.8335063783919325,0.48731616038337855]]\n",
                    "select * from blah",
                    true
            );
        });
    }

    @Test
    public void testTypeCast() {
        for (int i = 1; i < ColumnType.ARRAY_DIMENSION_LIMIT; i++) {
            for (int j = 0; j < ColumnType.ARRAY; j++) {
                Assert.assertTrue(ColumnType.isAssignableFrom(
                        ColumnType.encodeArrayType(j, i),
                        ColumnType.encodeArrayType(j, i)
                ));

                Assert.assertTrue(ColumnType.isAssignableFrom(
                        ColumnType.NULL,
                        ColumnType.encodeArrayType(j, i)
                ));
            }
        }

        for (int i = 1; i < ColumnType.ARRAY_DIMENSION_LIMIT; i++) {
            for (int j = 0; j < ColumnType.ARRAY; j++) {
                // not assignable from scalar to any array
                Assert.assertFalse(ColumnType.isAssignableFrom(
                        j,
                        ColumnType.encodeArrayType(j, i)
                ));

                // and other way around
                Assert.assertFalse(ColumnType.isAssignableFrom(
                        ColumnType.encodeArrayType(j, i),
                        j
                ));
            }
        }
    }

    @Test
    public void testUnsupportedArrayDimension() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table x (a int[][][][][][][][][][][][][][][][])");
            try (TableMetadata m = engine.getTableMetadata(engine.verifyTableName("x"))) {
                Assert.assertEquals(1, m.getColumnCount());
                Assert.assertEquals("a", m.getColumnName(0));
                Assert.assertEquals("INT[][][][][][][][][][][][][][][][]", ColumnType.nameOf(m.getColumnType(0)));
            }
            assertExceptionNoLeakCheck(
                    "create table y (a int[][][][][][][][][][][][][][][][][])", // 17 dimensions
                    18,
                    "array dimension limit is 16"
            );
        });
    }

    @Test
    public void testUnsupportedArrayType() throws Exception {
        assertMemoryLeak(() -> {
            assertExceptionNoLeakCheck(
                    "create table x (a symbol[][][])",
                    18,
                    "SYMBOL array type is not supported"
            );
            assertExceptionNoLeakCheck(
                    "create table x (abc varchar[][][])",
                    20,
                    "VARCHAR array type is not supported"
            );
        });
    }
}
