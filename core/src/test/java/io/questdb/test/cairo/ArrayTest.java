/*******************************************************************************
 *     ___                  _   ____  ____
 *    / _ \ _   _  ___  ___| |_|  _ \| __ )
 *   | | | | | | |/ _ \/ __| __| | | |  _ \
 *   | |_| | |_| |  __/\__ \ |_| |_| | |_) |
 *    \__\_\\__,_|\___||___/\__|____/|____/
 *
 *  Copyright (c) 2014-2019 Appsicle
 *  Copyright (c) 2019-2024 QuestDB
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 ******************************************************************************/

package io.questdb.test.cairo;

import io.questdb.cairo.ColumnType;
import io.questdb.cairo.sql.TableMetadata;
import io.questdb.test.AbstractCairoTest;
import org.junit.Assert;
import org.junit.Test;

public class ArrayTest extends AbstractCairoTest {

    @Test
    public void testCreateAsSelectDoubleNoWAL() throws Exception {
        assertMemoryLeak(() -> {
            execute(
                    "create table blah as (\n" +
                            "select rnd_varchar() a, rnd_double_array(1, 0) arr, rnd_int() b from long_sequence(10)\n" +
                            ");"
            );

            assertQuery(
                    "a\tarr\tb\n" +
                            "&\uDA1F\uDE98|\uD924\uDE04۲ӄǈ2L\t[0.4224356661645131,0.7094360487171202,0.38539947865244994,0.0035983672154330515,0.3288176907679504,0.021651819007252326]\t-938514914\n" +
                            "Y9}#jF\t[0.9687423276940171,0.6761934857077543,0.4882051101858693,0.42281342727402726,0.810161274171258,0.5298405941762054,0.022965637512889825,0.7763904674818695,0.975019885372507]\t-1533414895\n" +
                            "K䰭\u008B\t[0.456344569609078,0.2282233596526786,0.4149517697653501,0.04645849844580874,0.6821660861001273,0.45659895188239796,0.9566236549439661]\t-45567293\n" +
                            "#F0-k\\<*i^\t[0.49428905119584543,0.6359144993891355,0.5811247005631662,0.6752509547112409,0.9540069089049732,0.2553319339703062,0.8940917126581895,0.2879973939681931,0.6806873134626418,0.625966045857722,0.8733293804420821,0.7657837745299522]\t462277692\n" +
                            "\uDB59\uDF3B룒jᷚ\t[0.6697969295620055]\t-640305320\n" +
                            "?49Mqqpk-Z\t[0.8677181848634951,0.30716667810043663,0.4274704286353759,0.021189232728939578,0.7777024823107295,0.8221637568563206,0.22631523434159562,0.18336217509438513,0.9862476361578772]\t-2053564939\n" +
                            "V~!\t[0.5346019596733254]\t1728220848\n" +
                            "%l-\t[0.05024615679069011,0.9946372046359034,0.6940904779678791,0.5391626621794673,0.7668146556860689,0.2065823085842221,0.750281471677565,0.6590829275055244,0.5708643723875381,0.3568111021227658,0.05758228485190853,0.6729405590773638,0.1010501916946902]\t1448081412\n" +
                            "ꋵ\uD96E\uDCE7uKJܜߧ\t[0.1264215196329228,0.7215959171612961,0.4440250924606578,0.6810852005509421,0.24001459007748394,0.9292491654871197,0.741970173888595,0.25353478516307626,0.2739985338660311,0.39413730502371824,0.9359814814085834]\t-715453934\n" +
                            "ͱ:աf@ץ;윦\t[0.2559680920632348,0.23493793601747937,0.5150229280217947]\t1430716856\n",
                    "select * from blah",
                    true
            );
        });
    }

    @Test
    public void testCreateTableAllSupportedTypes() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table x (" +
                    "d double[][][]" +
                    ", b boolean[][][][]" +
                    ", bt byte[][][][][][][][]" +
                    ", f float[]" +
                    ", i int[][]" +
                    ", l long[][]" +
                    ", s short[][][][][]" +
                    ", dt date[][][][]" +
                    ", ts timestamp[][]" +
                    ", l2 long256[][][]" +
                    ", u uuid[][][][]" +
                    ", ip ipv4[][]" +
                    ", c double)");

            String[] expectedColumnNames = {
                    "d",
                    "b",
                    "bt",
                    "f",
                    "i",
                    "l",
                    "s",
                    "dt",
                    "ts",
                    "l2",
                    "u",
                    "ip",
                    "c"
            };

            String[] expectedColumnTypes = {
                    "DOUBLE[][][]",
                    "BOOLEAN[][][][]",
                    "BYTE[][][][][][][][]",
                    "FLOAT[]",
                    "INT[][]",
                    "LONG[][]",
                    "SHORT[][][][][]",
                    "DATE[][][][]",
                    "TIMESTAMP[][]",
                    "LONG256[][][]",
                    "UUID[][][][]",
                    "IPv4[][]",
                    "DOUBLE"
            };

            Assert.assertEquals(expectedColumnNames.length, expectedColumnTypes.length);
            // check the metadata
            try (TableMetadata m = engine.getTableMetadata(engine.verifyTableName("x"))) {
                Assert.assertEquals(expectedColumnNames.length, m.getColumnCount());

                for (int i = 0, n = expectedColumnNames.length; i < n; i++) {
                    Assert.assertEquals(expectedColumnNames[i], m.getColumnName(i));
                    Assert.assertEquals(expectedColumnTypes[i], ColumnType.nameOf(m.getColumnType(i)));
                }
            }
        });
    }

    @Test
    public void testInsertAsSelectDoubleNoWAL() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table blah (a double[][])");
            execute("insert into blah select rnd_double_array(2, 0) from long_sequence(10)");

            assertQuery(
                    "a\n" +
                            "[[0.12966659791573354,0.299199045961845,0.9344604857394011,0.8423410920883345]]\n" +
                            "[[0.8899286912289663,0.6254021542412018,0.4621835429127854,0.5599161804800813,0.7261136209823622,0.4224356661645131,0.7094360487171202,0.38539947865244994,0.0035983672154330515,0.3288176907679504,0.021651819007252326,0.6217326707853098,0.8146807944500559],[0.4022810626779558,0.38179758047769774,0.12026122412833129,0.6700476391801052,0.3435685332942956,0.7883065830055033,0.7664256753596138,0.3762501709498378,0.8445258177211064,0.29313719347837397,0.8847591603509142,0.4900510449885239,0.8258367614088108]]\n" +
                            "[[0.18769708157331322,0.16381374773748514,0.6590341607692226,0.40455469747939254,0.8837421918800907,0.05384400312338511,0.09750574414434399,0.9644183832564398,0.7588175403454873,0.5778947915182423,0.9269068519549879,0.5449155021518948,0.1202416087573498,0.9640289041849747,0.7133910271555843],[0.6551335839796312,0.4971342426836798,0.48558682958070665,0.9047642416961028,0.03167026265669903,0.14830552335848957,0.9441658975532605,0.3456897991538844,0.24008362859107102,0.619291960382302,0.17833722747266334,0.2185865835029681,0.3901731258748704,0.7056586460237274,0.8438459563914771],[0.13006100084163252,0.3679848625908545,0.06944480046327317,0.4295631643526773,0.5893398488053903,0.5699444693578853,0.9918093114862231,0.32424562653969957,0.8998921791869131,0.7458169804091256,0.33746104579374825,0.18740488620384377,0.10527282622013212,0.8291193369353376,0.32673950830571696],[0.5992548493051852,0.6455967424250787,0.6202777455654276,0.029080850168636263,0.10459352312331183,0.5346019596733254,0.9418719455092096,0.6341292894843615,0.7340656260730631,0.5025890936351257,0.8952510116133903,0.48964139862697853,0.7700798090070919,0.4416432347777828,0.05158459929273784],[0.2445295612285482,0.5466900921405317,0.5290006415737116,0.7260468106076399,0.7229359906306887,0.4592067757817594,0.5716129058692643,0.05094182589333662,0.3081188706162764,0.8977236684869918,0.40791879008699594,0.7694744648762927,0.8720995238279701,0.892454783921197,0.09303344348778264],[0.5913874468544745,0.08890450062949395,0.1264215196329228,0.7215959171612961,0.4440250924606578,0.6810852005509421,0.24001459007748394,0.9292491654871197,0.741970173888595,0.25353478516307626,0.2739985338660311,0.39413730502371824,0.9359814814085834,0.10227682008381178,0.7873229912811514],[0.04001697462715281,0.03973283003449557,0.3460851141092931,0.8321000514308267,0.18852800970933203,0.6226001464598434,0.4346135812930124,0.8786111112537701,0.996637725831904,0.6334964081687151,0.6721404635638454,0.7707249647497968,0.8813290192134411,0.17405556853190263,0.823395724427589],[0.007985454958725269,0.5090837921075583,0.7530494527849502,0.49153268154777974,0.0024457698760806945,0.29168465906260244,0.3121271759430503,0.3004874521886858,0.3521084750492214,0.1511578096923386,0.18746631995449403,0.29150980082006395,0.7272119755925095,0.5676527283594215,0.8402964708129546],[0.7732229848518976,0.587752738240427,0.4667778758533798,0.17498425722537903,0.9797944775606992,0.7795623293844108,0.29242748475227853,0.7527907209539796,0.9934423708117267,0.4834201611292943,0.794252253619802,0.8115426881784433,0.4249052453180263,0.7431472218131966,0.5889504900909748],[0.6612090806765161,0.798471808479839,0.01396079545983997,0.8136014373529948,0.970570224065161,0.37286547899075506,0.11624252077059061,0.9205584285421768,0.21498295033639603,0.943246566467627,0.17202485647400034,0.7253202715679453,0.4268921400209912,0.9997797234031688,0.5234892454427748],[0.8549061862466252,0.9482880758785679,0.17094358360735395,0.06670023271622016,0.5449970817079417,0.8136066472617021,0.005327467706811806,0.9753445881385404,0.6479617440673516,0.5900836401674938,0.12217702189166091,0.7717552767944976,0.8387598218385978,0.7620812803991436,0.21458226845142114],[0.08934586837197267,0.6506604601705693,0.7020445151566204,0.569773318453233,0.22347827811588927,0.734728770956117,0.33828954246335896,0.18442756220221035,0.009302399817494589,0.7806183442034064,0.06027878760582406,0.4086323159337839,0.3218450864634881,0.8034049105590781,0.04404000858917945],[0.14295673988709012,0.03314618075579956,0.8383060222517912,0.2325041018786207,0.07866253119693045,0.8386104714017393,0.9561778292078881,0.11048000399634927,0.7095853775757784,0.7242368741635276,0.10747511833573742,0.6741248448728824,0.030997441190531494,0.3833564540051365,0.37332681683920477],[0.15274858078119136,0.0016532800623808575,0.23567419576658333,0.5713685355920771,0.7645280362997794,0.07383464174908916,0.8791439438812569,0.7110275609764849,0.6940917925148332,0.33924820213821316,0.30062011052460846,0.4412051102084278,0.7783351753890267,0.33046819455237,0.97613283653158],[0.3124458010612313,0.1350821238488883,0.3397922134720558,0.8376372223926546,0.365427022047211,0.5921457770297527,0.8486538207666282,0.15121120303896474,0.9370193388878216,0.39201296350741366,0.5700419290086554,0.16064467510169633,0.0846754178136283,0.5765797240495835,0.4913342104187668]]\n" +
                            "[[0.40410163160526613,0.07425696969451101,0.6366661294462517,0.5976614546411813,0.9531459048178456,0.5261234649527643,0.030750139424332357,0.20921704056371593,0.681606585145203,0.11134244333117826,0.08109202364673884,0.2362963290561556,0.2266157317795261,0.7430101994511517],[0.6993909595959196,0.4755193286163272,0.004918542726028763,0.021177977444738705,0.6995547582800753,0.8303845449546206,0.28831783004973577,0.7636347764664544,0.2195743166842714,0.0966240354078981,0.5823910118974169,0.05942010834028011,0.9849599785483799,0.8151917094201774]]\n" +
                            "[[0.9239514793425267,0.6690790546123128,0.6591146619441391,0.8545896910200949,0.2712934077694782,0.45516613187238597],[0.3228786903275197,0.053286806650773566,0.3448217091983955,0.5707868589224653,0.45278823120909895,0.47107881346820746],[0.7630648900646654,0.8637346569402254,0.48573429889865705,0.261612577696983,0.6198590038961462,0.7020508159399581],[0.5862806534829702,0.7134568516750471,0.09213339395256293,0.38000152873098747,0.5157225592346661,0.5267323130847268],[0.09854153834719315,0.2328552828087207,0.8335063783919325,0.9321703394650436,0.48465267676967827,0.14756353014849555],[0.25604136769205754,0.44172683242560085,0.2696094902942793,0.899050586403365,0.3503522147575858,0.7389772880219149],[0.22371932699681862,0.019529452719755813,0.5330584032999529,0.9766284858951397,0.1999576586778039,0.47930730718677406],[0.6936669914583254,0.7128505998532723,0.5940502728139653,0.7861254708288083,0.1319044042993568,0.45862629276476996],[0.3812506482325819,0.307622006691777,0.6376518594972684,0.6453590096721576,0.32613652012030125,0.3393509514000247],[0.6281252905002019,0.5188000840307428,0.8054745482045382,0.30874126787936973,0.6931441108030082,0.16048069056478798],[0.02633639777833019,0.5081836003758192,0.36986619304630497,0.6039174661672239,0.7874929839944909,0.6320839159367109],[0.7751886508004251,0.265224199619046,0.6288088087840823,0.1288393076713259,0.5350165471764692,0.6152644802002145],[0.43619251546485505,0.5773502231407235,0.9410396704938232,0.22407665790705777,0.4246651384043666,0.3031376204022046],[0.08533575092925538,0.6266142259812271,0.8925004728084927,0.18170646835643245,0.8413721135371649,0.7360581387248145]]\n" +
                            "[[0.4701492486769596]]\n" +
                            "[[0.7858350472508433,0.761296424148768,0.3622662341580306,0.3726618828334195,0.7217315729790722,0.2875739269292986,0.9347912212983339,0.4960818612914606,0.5089437674017353,0.9154548873622441,0.8470755372946043,0.8061988461374605,0.6343133564417237],[0.9380189854875546,0.6434872763996672,0.13607574134551215,0.4510483042269017,0.1779779439502811,0.4338972476284021,0.8810670433021828,0.09671321049914583,0.5956163532141281,0.3836027299974998,0.13648017965541281,0.5313143400887891,0.3436802159856278],[0.28400807705010733,0.5784462314078672,0.15464367746097551,0.9325892008297832,0.7200031730502818,0.5133738535522754,0.9112430321917995,0.046172168224761334,0.6391251028594114,0.5140909855075729,0.08977959272389147,0.5613174142074612,0.48432558936820347],[0.7729111631116361,0.19245855538083634,0.8245822920507528,0.8235056484964091,0.8645536237512511,0.8096078909402364,0.7222951979294405,0.2017974971999763,0.9720791156050784,0.3911828760735948,0.1810605823104886,0.9209048724105472,0.8967196946317529],[0.2622214132582351,0.8669667625804924,0.6609657087067649,0.486440482380041,0.03554537640844224,0.9128848579835603,0.8510208445183796,0.11269041694834825,0.473299957111994,0.3669999679163578,0.7116036820921031,0.7184108604451028,0.7995154334778554],[0.7776474810620265,0.028814588598028656,0.4151433463570058,0.492575650262437,0.12027057950578746,0.3618830210066676,0.5999750613543716,0.12232206466755036,0.49950663682485574,0.9700250276928207,0.9251043257912728,0.4899025858706836,0.7573509485315202],[0.5398429936512047,0.9207177299535534,0.5179378181896932,0.23290767295012593,0.5892857157920004,0.0983023224719013,0.6338382817759625,0.11493568065083815,0.49045582720444825,0.22148534962398414,0.705318413494936,0.45039214871547917,0.4127332979349321],[0.32484768130656416,0.2069852688349777,0.6385649970707139,0.15407035130961344,0.8825940193001498,0.8503583964852268,0.05339947229164044,0.6747913655036517,0.48946389150219016,0.2801534673453049,0.21145554092946495,0.8267002457663516,0.9611191020328969],[0.9277429447320458,0.625275838160094,0.5330895288680357,0.14419737823460133,0.02632531361499113,0.9425658579916102,0.13382390261452382,0.9859525796947011,0.2869636576132818,0.9028381160965113,0.12049392901868938,0.7399948696680694,0.3519528251115003],[0.8706500807260904,0.9482299514046391,0.7852927728037424,0.6958887335679982,0.45384900266810624,0.16293636241016318,0.16014381292432334,0.7297104548756331,0.6459182763886085,0.03598534036117873,0.8964900546165293,0.5460896792544052,0.2763714033301786],[0.5507381683150634,0.20149911409322863,0.6160933784748995,0.11465885305674761,0.43284845886982815,0.1740035812230043,0.76274088069678,0.21535412791353414,0.38292794003847785,0.6687870335995244,0.39942578826922215,0.2582028171564791,0.5114140976913433],[0.04929733954707505,0.4588924040964164,0.7692964421576207,0.3740543955879213,0.3665876542268325,0.9978001621815699,0.4452148524967028,0.582042398055228,0.14078690536547778,0.9330580156632272,0.3082260347287745,0.110401374979613,0.4203897782712428],[0.9879118064160076,0.018947880493912606,0.5443009706474673,0.007993869695747557,0.2840382852834289,0.46648649884157944,0.03804995327454719,0.10288432263881209,0.9336208924208746,0.48264093321778834,0.7311141146439794,0.09509439640459871,0.6455308455173533],[0.5938364474282036,0.14008139132534625,0.7798032758089017,0.08746940413841608,0.47367603337536135,0.4131950003969651,0.779572495695852,0.8368079742276645,0.7608768377234525,0.07419488600417712,0.5115629621647786,0.8549000590815887,0.007868356216637062]]\n" +
                            "[[0.6162890904954973,0.8223388398922372,0.7204948297346784,0.7855404600463808,0.7487334280076515,0.5319122221997539,0.6091934816748156,0.1211383169485164,0.1996227368107607,0.03445877829339894,0.337928644771052,0.538852735365158,0.2749299986087188],[0.06138053193106652,0.5984119719864727,0.7215695095610233,0.22679227365266064,0.18306406463130864,0.6752437605527831,0.5595264771873394,0.5501791172519537,0.3200388527033077,0.017077050555570406,0.23933418178773092,0.261353919293132,0.922772279885169],[0.6153355275821265,0.7301213715634304,0.7848127252854841,0.5385163739906367,0.3818654045952554,0.3879703324918904,0.8336264512419649,0.05755679124970392,0.3927411486774479,0.2896406626729705,0.20401445452847744,0.5883480106883919,0.5772963808264585],[0.36639618205313174,0.5698455447947597,0.1760335737117784,0.1548262580996853,0.9694379845594773,0.2232959099494619,0.38407607876483274,0.9324996073961456,0.8686031048915425,0.39971813842621085,0.03223511148936853,0.6438822329528859,0.46317149273610114],[0.8820067326198463,0.6867704803088368,0.24633823409315458,0.27293702465966674,0.13655419467547736,0.4214933542294964,0.8810300364147652,0.5206119661207139,0.2669693591828549,0.11871140010211256,0.6928386275694387,0.2785374588316749,0.13901780356368942],[0.39520827526311997,0.2269754527380209,0.28256286706363265,0.681152025483957,0.28578801612459015,0.28709309141645467,0.030364711108818665,0.7514174999803465,0.98687771673371,0.6600020468848049,0.7954501942090235,0.37153646386438366,0.532264810312935],[0.7691690144444759,0.18089942609324228,0.8222256992942623,0.27529268239520066,0.5769726102793528,0.5155110628992104,0.830789641536218,0.16184086881709847,0.14372822419264253,0.8047954890194065,0.34691581051352394,0.6571365030684768,0.7996807760628202],[0.6832898918851213,0.7395634891127978,0.42092754879863714,0.021480211825389728,0.9426813690523937,0.8726868820295411,0.16377750258186674,0.1420381747801136,0.7620598808076605,0.9039647934914378,0.6258718177930418,0.2992989877169011,0.6714436866004777],[0.1722548698939924,0.3744661371925302,0.12639554210368897,0.028091295778413405,0.07249353704307582,0.4972049796950656,0.7396895179853595,0.8374665772063014,0.2648780427570352,0.18209826013076702,0.6518094128005566,0.6361803612485613,0.25360631912488385],[0.30583440932161066,0.5149106041333245,0.7060432532682597,0.7729051818907344,0.6592659982804954,0.7048071355343314,0.024686564358652907,0.02675146114918925,0.6390510627741428,0.9125762732715278,0.6918315153670831,0.856070190635276,0.26238778480355884]]\n" +
                            "[[0.11238218143770518,0.8187931403908936,0.7710260779048668,0.44424242157508265,0.8684108564050481]]\n" +
                            "[[0.28064354665692726,0.2885975915542155,0.7846457087898672,0.9491441900738318,0.46676769695170806,0.5970190396613553,0.06531198416376283,0.6091450635141585,0.5095336454514618,0.4341461506659853,0.1934242183046263,0.0509785516121366,0.06746067395870348,0.7673439297255527],[0.836950592868919,0.7469809980802703,0.4112208369860437,0.2755951090418418,0.2392890241804314,0.24333255137148546,0.2661481258012208,0.1059984516511765,0.5636564813553648,0.5074877749062782,0.9376548591973837,0.09648061880838898,0.005551145519015588,0.13113733476126788],[0.8117263712263708,0.6952609004838931,0.9790606155233822,0.2562861356333169,0.8628168662899388,0.8200337388014453,0.3126897402574973,0.985179782114092,0.4827490189042424,0.4197074512618787,0.5715713514558782,0.7437908477686129,0.36872457538395875,0.9254136460841657],[0.43447906983289974,0.6782404885586191,0.4870438809564194,0.9632318382041147,0.2130107816322534,0.06115382042103079,0.03785842679744411,0.2676094355849844,0.28069912068346936,0.21231239376765998,0.06104111935464773,0.19601431728224172,0.028465583868469424,0.023780164968562834],[0.2925095264769467,0.817623781720735,0.5650671906547997,0.5872776844863592,0.15761877750359965,0.2723593454829364,0.1630847935678591,0.14982199475775193,0.5542476776901315,0.4452645911659644,0.5669906287267767,0.8638077670566735,0.3749470137249791,0.07566095863599542],[0.3667891830068686,0.05770626549921609,0.5793491483518802,0.9460485187771173,0.3316429623874093,0.5342134932052683,0.7166146534916156,0.01267185841652596,0.4092855518676668,0.7487092275436548,0.9412326582260031,0.26165955262694707,0.5660772288041055,0.7450142997148277],[0.8669385769345621,0.40436012531692256,0.8372187512627467,0.9571361724543702,0.48347771832992303,0.8323999830230796,0.3649652944981656,0.43488889358036487,0.4076635842631907,0.7775208173239011,0.6987933922981602,0.8779552626878336,0.25208337281142745,0.9308109024121684],[0.025056896347271373,0.020588951610466033,0.9749391591297927,0.22183926354846573,0.24586870756326218,0.7854514560860658,0.4340593345759689,0.6588605039756569,0.16470808430121375,0.6003791114896391,0.6481379637041266,0.9156453066150101,0.676458926395297,0.4011877360611795],[0.17039130563484572,0.4963276400263983,0.33406452704602985,0.7975125510473152,0.8700664620406791,0.0353368963695484,0.3892309193379503,0.28178087961615217,0.2855764680918911,0.6485577517124145,0.010781383760192442,0.7744243480631873,0.1990156537010621,4.289669820148889E-4]]\n",
                    "select * from blah",
                    true
            );
        });
    }

    @Test
    public void testTypeCast() {
        for (int i = 1; i < ColumnType.ARRAY_DIMENSION_LIMIT; i++) {
            for (int j = 0; j < ColumnType.ARRAY; j++) {
                Assert.assertTrue(ColumnType.isAssignableFrom(
                        ColumnType.encodeArrayType(j, i),
                        ColumnType.encodeArrayType(j, i)
                ));

                Assert.assertTrue(ColumnType.isAssignableFrom(
                        ColumnType.NULL,
                        ColumnType.encodeArrayType(j, i)
                ));
            }
        }

        for (int i = 1; i < ColumnType.ARRAY_DIMENSION_LIMIT; i++) {
            for (int j = 0; j < ColumnType.ARRAY; j++) {
                // not assignable from scalar to any array
                Assert.assertFalse(ColumnType.isAssignableFrom(
                        j,
                        ColumnType.encodeArrayType(j, i)
                ));

                // and other way around
                Assert.assertFalse(ColumnType.isAssignableFrom(
                        ColumnType.encodeArrayType(j, i),
                        j
                ));
            }
        }
    }

    @Test
    public void testUnsupportedArrayDimension() throws Exception {
        assertMemoryLeak(() -> {
            execute("create table x (a int[][][][][][][][][][][][][][][][])");
            try (TableMetadata m = engine.getTableMetadata(engine.verifyTableName("x"))) {
                Assert.assertEquals(1, m.getColumnCount());
                Assert.assertEquals("a", m.getColumnName(0));
                Assert.assertEquals("INT[][][][][][][][][][][][][][][][]", ColumnType.nameOf(m.getColumnType(0)));
            }
            assertExceptionNoLeakCheck(
                    "create table y (a int[][][][][][][][][][][][][][][][][])", // 17 dimensions
                    18,
                    "array dimension limit is 16"
            );
        });
    }

    @Test
    public void testUnsupportedArrayType() throws Exception {
        assertMemoryLeak(() -> {
            assertExceptionNoLeakCheck(
                    "create table x (a symbol[][][])",
                    18,
                    "SYMBOL array type is not supported"
            );
            assertExceptionNoLeakCheck(
                    "create table x (abc varchar[][][])",
                    20,
                    "VARCHAR array type is not supported"
            );
        });
    }
}
